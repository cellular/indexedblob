{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["fetchData","size","onProgress","a","url","console","log","fetch","res","ok","Error","status","statusText","body","contentEncoding","headers","get","contentLength","total","parseInt","loaded","response","Response","ReadableStream","start","controller","reader","getReader","read","then","done","value","close","byteLength","enqueue","catch","error","blob","Download","id","onComplete","useState","progress","setProgress","onClick","idb","toString","set","max","App","keys","setKeys","updateKeys","useEffect","map","key","Math","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b121fa7a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport * as idb from \"idb-keyval\";\n\nasync function fetchData(size, onProgress) {\n  const url = `https://cellular-speedtest.s3.eu-central-1.amazonaws.com/download/${size}mb`;\n  console.log(\"feching\", url);\n\n  const res = await fetch(url);\n  if (!res.ok) {\n    throw Error(res.status + \" \" + res.statusText);\n  }\n\n  if (!res.body) {\n    throw Error(\"ReadableStream not supported in this browser.\");\n  }\n\n  const contentEncoding = res.headers.get(\"content-encoding\");\n  const contentLength =\n    res.headers.get(contentEncoding ? \"x-file-size\" : \"content-length\") || size;\n\n  const total = parseInt(contentLength, 10);\n  let loaded = 0;\n\n  const response = new Response(\n    new ReadableStream({\n      start(controller) {\n        const reader = res.body.getReader();\n\n        read();\n        function read() {\n          reader\n            .read()\n            .then(({ done, value }) => {\n              if (done) {\n                controller.close();\n                return;\n              }\n              loaded += value.byteLength;\n              onProgress({ loaded, total });\n              controller.enqueue(value);\n              read();\n            })\n            .catch((error) => {\n              console.error(error);\n              controller.error(error);\n            });\n        }\n      },\n    })\n  );\n\n  return response.blob();\n}\n\nfunction Download({ id, size, onComplete }) {\n  const [progress, setProgress] = useState();\n  return (\n    <p>\n      <button\n        onClick={async () => {\n          await idb.set(id.toString(), await fetchData(size, setProgress));\n          onComplete();\n          setProgress(null);\n        }}\n      >\n        Download {size} MB\n      </button>\n      {progress && (\n        <progress max={progress.total} value={progress.loaded}>\n          {progress.loaded}%\n        </progress>\n      )}\n    </p>\n  );\n}\nfunction App() {\n  const [keys, setKeys] = useState([]);\n  const updateKeys = () => void idb.keys().then(setKeys);\n  useEffect(updateKeys, []);\n  return (\n    <>\n      <h1>IndexedDB Memory Usage Test</h1>\n      {keys.map((id) => (\n        <div key={id}>\n          Blob {id}\n          <button onClick={() => idb.del(id).then(updateKeys)}>Remove</button>\n        </div>\n      ))}\n      <Download\n        id={Math.max(0, ...keys) + 1}\n        size={500}\n        onComplete={updateKeys}\n      />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}